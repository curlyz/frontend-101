/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { contestEffectSummarySchema } from './contestEffectSummarySchema.ts'
import { contestTypeSummarySchema } from './contestTypeSummarySchema.ts'
import { generationSummarySchema } from './generationSummarySchema.ts'
import { moveChangeSchema } from './moveChangeSchema.ts'
import { moveDamageClassSummarySchema } from './moveDamageClassSummarySchema.ts'
import { moveFlavorTextSchema } from './moveFlavorTextSchema.ts'
import { moveMetaSchema } from './moveMetaSchema.ts'
import { moveNameSchema } from './moveNameSchema.ts'
import { moveTargetSummarySchema } from './moveTargetSummarySchema.ts'
import { superContestEffectSummarySchema } from './superContestEffectSummarySchema.ts'
import { typeSummarySchema } from './typeSummarySchema.ts'
import { z } from 'zod'

export const moveDetailSchema = z.object({
  id: z.number().int(),
  name: z.string().max(200),
  accuracy: z.number().int().optional().nullable(),
  effect_chance: z.number().int(),
  pp: z.number().int().optional().nullable(),
  priority: z.number().int().optional().nullable(),
  power: z.number().int().optional().nullable(),
  contest_combos: z.object({
    normal: z.object({
      use_before: z
        .array(
          z.object({
            name: z.string(),
            url: z.string().url(),
          }),
        )
        .nullable(),
      use_after: z
        .array(
          z.object({
            name: z.string(),
            url: z.string().url(),
          }),
        )
        .nullable(),
    }),
    super: z.object({
      use_before: z
        .array(
          z.object({
            name: z.string(),
            url: z.string().url(),
          }),
        )
        .nullable(),
      use_after: z
        .array(
          z.object({
            name: z.string(),
            url: z.string().url(),
          }),
        )
        .nullable(),
    }),
  }),
  contest_type: z.lazy(() => contestTypeSummarySchema),
  contest_effect: z.lazy(() => contestEffectSummarySchema),
  damage_class: z.lazy(() => moveDamageClassSummarySchema),
  effect_entries: z.array(
    z.object({
      effect: z.string(),
      short_effect: z.string(),
      language: z.object({
        name: z.string(),
        url: z.string().url(),
      }),
    }),
  ),
  effect_changes: z.array(
    z.object({
      effect_entries: z.array(
        z.object({
          effect: z.string(),
          language: z.object({
            name: z.string(),
            url: z.string().url(),
          }),
        }),
      ),
      version_group: z.object({
        name: z.string(),
        url: z.string().url(),
      }),
    }),
  ),
  generation: z.lazy(() => generationSummarySchema),
  meta: z.lazy(() => moveMetaSchema),
  names: z.array(z.lazy(() => moveNameSchema)),
  past_values: z.array(z.lazy(() => moveChangeSchema)),
  stat_changes: z.array(
    z.object({
      change: z.number().int(),
      stat: z.object({
        name: z.string(),
        url: z.string().url(),
      }),
    }),
  ),
  super_contest_effect: z.lazy(() => superContestEffectSummarySchema),
  target: z.lazy(() => moveTargetSummarySchema),
  type: z.lazy(() => typeSummarySchema),
  machines: z.array(
    z.object({
      machine: z.object({
        url: z.string().url(),
      }),
      version_group: z.object({
        name: z.string(),
        url: z.string().url(),
      }),
    }),
  ),
  flavor_text_entries: z.array(z.lazy(() => moveFlavorTextSchema)),
  learned_by_pokemon: z.array(
    z.object({
      name: z.string(),
      url: z.string().url(),
    }),
  ),
})