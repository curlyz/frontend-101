/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { GenerationListQueryResponse, GenerationListQueryParams } from '../types/GenerationList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { generationList } from '../client/generationList.ts'

export const generationListQueryKey = (params?: GenerationListQueryParams) => [{ url: '/api/v2/generation/' }, ...(params ? [params] : [])] as const

export type GenerationListQueryKey = ReturnType<typeof generationListQueryKey>

export function generationListQueryOptions(params?: GenerationListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return generationList(params, config)
    },
  }
}

/**
 * @description A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
 * @summary List genrations
 * {@link /api/v2/generation/}
 */
export function useGenerationList(
  params?: GenerationListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<GenerationListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = generationListQueryKey(params)

  return useSWR<GenerationListQueryResponse, ResponseErrorConfig<Error>, GenerationListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...generationListQueryOptions(params, config),
    ...queryOptions,
  })
}