/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { MoveDamageClassRetrieveQueryResponse, MoveDamageClassRetrievePathParams } from '../../models/pokemonController/MoveDamageClassRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { moveDamageClassRetrieve } from '../../clients/pokemonController/moveDamageClassRetrieve.ts'

export const moveDamageClassRetrieveQueryKey = (id: MoveDamageClassRetrievePathParams['id']) =>
  [{ url: '/api/v2/move-damage-class/:id/', params: { id: id } }] as const

export type MoveDamageClassRetrieveQueryKey = ReturnType<typeof moveDamageClassRetrieveQueryKey>

export function moveDamageClassRetrieveQueryOptions(
  id: MoveDamageClassRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return moveDamageClassRetrieve(id, config)
    },
  }
}

/**
 * @description Damage classes moves can have, e.g. physical, special, or non-damaging.
 * @summary Get move damage class
 * {@link /api/v2/move-damage-class/:id/}
 */
export function useMoveDamageClassRetrieve(
  id: MoveDamageClassRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<MoveDamageClassRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = moveDamageClassRetrieveQueryKey(id)

  return useSWR<MoveDamageClassRetrieveQueryResponse, ResponseErrorConfig<Error>, MoveDamageClassRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...moveDamageClassRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}