/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { TypeListQueryResponse, TypeListQueryParams } from '../../models/pokemonController/TypeList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { typeList } from '../../clients/pokemonController/typeList.ts'

export const typeListQueryKey = (params?: TypeListQueryParams) => [{ url: '/api/v2/type/' }, ...(params ? [params] : [])] as const

export type TypeListQueryKey = ReturnType<typeof typeListQueryKey>

export function typeListQueryOptions(params?: TypeListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return typeList(params, config)
    },
  }
}

/**
 * @description Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
 * @summary List types
 * {@link /api/v2/type/}
 */
export function useTypeList(
  params?: TypeListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<TypeListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = typeListQueryKey(params)

  return useSWR<TypeListQueryResponse, ResponseErrorConfig<Error>, TypeListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...typeListQueryOptions(params, config),
    ...queryOptions,
  })
}