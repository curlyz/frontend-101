/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { TypeRetrieveQueryResponse, TypeRetrievePathParams } from '../../models/pokemonController/TypeRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { typeRetrieve } from '../../clients/pokemonController/typeRetrieve.ts'

export const typeRetrieveQueryKey = (id: TypeRetrievePathParams['id']) => [{ url: '/api/v2/type/:id/', params: { id: id } }] as const

export type TypeRetrieveQueryKey = ReturnType<typeof typeRetrieveQueryKey>

export function typeRetrieveQueryOptions(id: TypeRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return typeRetrieve(id, config)
    },
  }
}

/**
 * @description Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
 * @summary Get types
 * {@link /api/v2/type/:id/}
 */
export function useTypeRetrieve(
  id: TypeRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<TypeRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = typeRetrieveQueryKey(id)

  return useSWR<TypeRetrieveQueryResponse, ResponseErrorConfig<Error>, TypeRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...typeRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}