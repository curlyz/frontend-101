/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { LanguageListQueryResponse, LanguageListQueryParams } from '../../models/utilityController/LanguageList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { languageList } from '../../clients/utilityController/languageList.ts'

export const languageListQueryKey = (params?: LanguageListQueryParams) => [{ url: '/api/v2/language/' }, ...(params ? [params] : [])] as const

export type LanguageListQueryKey = ReturnType<typeof languageListQueryKey>

export function languageListQueryOptions(params?: LanguageListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return languageList(params, config)
    },
  }
}

/**
 * @description Languages for translations of API resource information.
 * @summary List languages
 * {@link /api/v2/language/}
 */
export function useLanguageList(
  params?: LanguageListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<LanguageListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = languageListQueryKey(params)

  return useSWR<LanguageListQueryResponse, ResponseErrorConfig<Error>, LanguageListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...languageListQueryOptions(params, config),
    ...queryOptions,
  })
}