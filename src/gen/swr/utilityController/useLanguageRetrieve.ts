/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { LanguageRetrieveQueryResponse, LanguageRetrievePathParams } from '../../models/utilityController/LanguageRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { languageRetrieve } from '../../clients/utilityController/languageRetrieve.ts'

export const languageRetrieveQueryKey = (id: LanguageRetrievePathParams['id']) => [{ url: '/api/v2/language/:id/', params: { id: id } }] as const

export type LanguageRetrieveQueryKey = ReturnType<typeof languageRetrieveQueryKey>

export function languageRetrieveQueryOptions(id: LanguageRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return languageRetrieve(id, config)
    },
  }
}

/**
 * @description Languages for translations of API resource information.
 * @summary Get language
 * {@link /api/v2/language/:id/}
 */
export function useLanguageRetrieve(
  id: LanguageRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<LanguageRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = languageRetrieveQueryKey(id)

  return useSWR<LanguageRetrieveQueryResponse, ResponseErrorConfig<Error>, LanguageRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...languageRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}