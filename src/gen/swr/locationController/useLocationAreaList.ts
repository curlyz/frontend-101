/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { LocationAreaListQueryResponse, LocationAreaListQueryParams } from '../../models/locationController/LocationAreaList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { locationAreaList } from '../../clients/locationController/locationAreaList.ts'

export const locationAreaListQueryKey = (params?: LocationAreaListQueryParams) => [{ url: '/api/v2/location-area/' }, ...(params ? [params] : [])] as const

export type LocationAreaListQueryKey = ReturnType<typeof locationAreaListQueryKey>

export function locationAreaListQueryOptions(params?: LocationAreaListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return locationAreaList(params, config)
    },
  }
}

/**
 * @description Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pok√©mon encounters.
 * @summary List location areas
 * {@link /api/v2/location-area/}
 */
export function useLocationAreaList(
  params?: LocationAreaListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<LocationAreaListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = locationAreaListQueryKey(params)

  return useSWR<LocationAreaListQueryResponse, ResponseErrorConfig<Error>, LocationAreaListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...locationAreaListQueryOptions(params, config),
    ...queryOptions,
  })
}