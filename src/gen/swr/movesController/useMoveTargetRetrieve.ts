/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { MoveTargetRetrieveQueryResponse, MoveTargetRetrievePathParams } from '../../models/movesController/MoveTargetRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { moveTargetRetrieve } from '../../clients/movesController/moveTargetRetrieve.ts'

export const moveTargetRetrieveQueryKey = (id: MoveTargetRetrievePathParams['id']) => [{ url: '/api/v2/move-target/:id/', params: { id: id } }] as const

export type MoveTargetRetrieveQueryKey = ReturnType<typeof moveTargetRetrieveQueryKey>

export function moveTargetRetrieveQueryOptions(id: MoveTargetRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return moveTargetRetrieve(id, config)
    },
  }
}

/**
 * @description Targets moves can be directed at during battle. Targets can be Pok√©mon, environments or even other moves.
 * @summary Get move target
 * {@link /api/v2/move-target/:id/}
 */
export function useMoveTargetRetrieve(
  id: MoveTargetRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<MoveTargetRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = moveTargetRetrieveQueryKey(id)

  return useSWR<MoveTargetRetrieveQueryResponse, ResponseErrorConfig<Error>, MoveTargetRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...moveTargetRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}