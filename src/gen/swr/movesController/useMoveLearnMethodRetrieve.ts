/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { MoveLearnMethodRetrieveQueryResponse, MoveLearnMethodRetrievePathParams } from '../../models/movesController/MoveLearnMethodRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { moveLearnMethodRetrieve } from '../../clients/movesController/moveLearnMethodRetrieve.ts'

export const moveLearnMethodRetrieveQueryKey = (id: MoveLearnMethodRetrievePathParams['id']) =>
  [{ url: '/api/v2/move-learn-method/:id/', params: { id: id } }] as const

export type MoveLearnMethodRetrieveQueryKey = ReturnType<typeof moveLearnMethodRetrieveQueryKey>

export function moveLearnMethodRetrieveQueryOptions(
  id: MoveLearnMethodRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return moveLearnMethodRetrieve(id, config)
    },
  }
}

/**
 * @description Methods by which Pok√©mon can learn moves.
 * @summary Get move learn method
 * {@link /api/v2/move-learn-method/:id/}
 */
export function useMoveLearnMethodRetrieve(
  id: MoveLearnMethodRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<MoveLearnMethodRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = moveLearnMethodRetrieveQueryKey(id)

  return useSWR<MoveLearnMethodRetrieveQueryResponse, ResponseErrorConfig<Error>, MoveLearnMethodRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...moveLearnMethodRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}