/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { EvolutionChainListQueryResponse, EvolutionChainListQueryParams } from '../../models/evolutionController/EvolutionChainList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { evolutionChainList } from '../../clients/evolutionController/evolutionChainList.ts'

export const evolutionChainListQueryKey = (params?: EvolutionChainListQueryParams) =>
  [{ url: '/api/v2/evolution-chain/' }, ...(params ? [params] : [])] as const

export type EvolutionChainListQueryKey = ReturnType<typeof evolutionChainListQueryKey>

export function evolutionChainListQueryOptions(params?: EvolutionChainListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return evolutionChainList(params, config)
    },
  }
}

/**
 * @description Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pok√©mon they can evolve into up through the hierarchy.
 * @summary List evolution chains
 * {@link /api/v2/evolution-chain/}
 */
export function useEvolutionChainList(
  params?: EvolutionChainListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<EvolutionChainListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = evolutionChainListQueryKey(params)

  return useSWR<EvolutionChainListQueryResponse, ResponseErrorConfig<Error>, EvolutionChainListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...evolutionChainListQueryOptions(params, config),
    ...queryOptions,
  })
}