/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ItemCategoryRetrieveQueryResponse, ItemCategoryRetrievePathParams } from '../types/ItemCategoryRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { itemCategoryRetrieve } from '../client/itemCategoryRetrieve.ts'

export const itemCategoryRetrieveQueryKey = (id: ItemCategoryRetrievePathParams['id']) => [{ url: '/api/v2/item-category/:id/', params: { id: id } }] as const

export type ItemCategoryRetrieveQueryKey = ReturnType<typeof itemCategoryRetrieveQueryKey>

export function itemCategoryRetrieveQueryOptions(id: ItemCategoryRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return itemCategoryRetrieve(id, config)
    },
  }
}

/**
 * @description Item categories determine where items will be placed in the players bag.
 * @summary Get item category
 * {@link /api/v2/item-category/:id/}
 */
export function useItemCategoryRetrieve(
  id: ItemCategoryRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<ItemCategoryRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = itemCategoryRetrieveQueryKey(id)

  return useSWR<ItemCategoryRetrieveQueryResponse, ResponseErrorConfig<Error>, ItemCategoryRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...itemCategoryRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}