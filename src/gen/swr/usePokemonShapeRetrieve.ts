/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { PokemonShapeRetrieveQueryResponse, PokemonShapeRetrievePathParams } from '../types/PokemonShapeRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { pokemonShapeRetrieve } from '../client/pokemonShapeRetrieve.ts'

export const pokemonShapeRetrieveQueryKey = (id: PokemonShapeRetrievePathParams['id']) => [{ url: '/api/v2/pokemon-shape/:id/', params: { id: id } }] as const

export type PokemonShapeRetrieveQueryKey = ReturnType<typeof pokemonShapeRetrieveQueryKey>

export function pokemonShapeRetrieveQueryOptions(id: PokemonShapeRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return pokemonShapeRetrieve(id, config)
    },
  }
}

/**
 * @description Shapes used for sorting Pokémon in a Pokédex.
 * @summary Get pokemon shape
 * {@link /api/v2/pokemon-shape/:id/}
 */
export function usePokemonShapeRetrieve(
  id: PokemonShapeRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<PokemonShapeRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = pokemonShapeRetrieveQueryKey(id)

  return useSWR<PokemonShapeRetrieveQueryResponse, ResponseErrorConfig<Error>, PokemonShapeRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...pokemonShapeRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}