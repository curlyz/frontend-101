/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ItemAttributeRetrieveQueryResponse, ItemAttributeRetrievePathParams } from '../../models/itemsController/ItemAttributeRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { itemAttributeRetrieve } from '../../clients/itemsController/itemAttributeRetrieve.ts'

export const itemAttributeRetrieveQueryKey = (id: ItemAttributeRetrievePathParams['id']) =>
  [{ url: '/api/v2/item-attribute/:id/', params: { id: id } }] as const

export type ItemAttributeRetrieveQueryKey = ReturnType<typeof itemAttributeRetrieveQueryKey>

export function itemAttributeRetrieveQueryOptions(id: ItemAttributeRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return itemAttributeRetrieve(id, config)
    },
  }
}

/**
 * @description Item attributes define particular aspects of items, e.g."usable in battle" or "consumable".
 * @summary Get item attribute
 * {@link /api/v2/item-attribute/:id/}
 */
export function useItemAttributeRetrieve(
  id: ItemAttributeRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<ItemAttributeRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = itemAttributeRetrieveQueryKey(id)

  return useSWR<ItemAttributeRetrieveQueryResponse, ResponseErrorConfig<Error>, ItemAttributeRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...itemAttributeRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}