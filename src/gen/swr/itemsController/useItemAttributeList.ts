/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ItemAttributeListQueryResponse, ItemAttributeListQueryParams } from '../../models/itemsController/ItemAttributeList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { itemAttributeList } from '../../clients/itemsController/itemAttributeList.ts'

export const itemAttributeListQueryKey = (params?: ItemAttributeListQueryParams) => [{ url: '/api/v2/item-attribute/' }, ...(params ? [params] : [])] as const

export type ItemAttributeListQueryKey = ReturnType<typeof itemAttributeListQueryKey>

export function itemAttributeListQueryOptions(params?: ItemAttributeListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return itemAttributeList(params, config)
    },
  }
}

/**
 * @description Item attributes define particular aspects of items, e.g."usable in battle" or "consumable".
 * @summary List item attributes
 * {@link /api/v2/item-attribute/}
 */
export function useItemAttributeList(
  params?: ItemAttributeListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<ItemAttributeListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = itemAttributeListQueryKey(params)

  return useSWR<ItemAttributeListQueryResponse, ResponseErrorConfig<Error>, ItemAttributeListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...itemAttributeListQueryOptions(params, config),
    ...queryOptions,
  })
}