/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ItemPocketRetrieveQueryResponse, ItemPocketRetrievePathParams } from '../../models/itemsController/ItemPocketRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { itemPocketRetrieve } from '../../clients/itemsController/itemPocketRetrieve.ts'

export const itemPocketRetrieveQueryKey = (id: ItemPocketRetrievePathParams['id']) => [{ url: '/api/v2/item-pocket/:id/', params: { id: id } }] as const

export type ItemPocketRetrieveQueryKey = ReturnType<typeof itemPocketRetrieveQueryKey>

export function itemPocketRetrieveQueryOptions(id: ItemPocketRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return itemPocketRetrieve(id, config)
    },
  }
}

/**
 * @description Pockets within the players bag used for storing items by category.
 * @summary Get item pocket
 * {@link /api/v2/item-pocket/:id/}
 */
export function useItemPocketRetrieve(
  id: ItemPocketRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<ItemPocketRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = itemPocketRetrieveQueryKey(id)

  return useSWR<ItemPocketRetrieveQueryResponse, ResponseErrorConfig<Error>, ItemPocketRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...itemPocketRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}