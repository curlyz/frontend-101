/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { VersionRetrieveQueryResponse, VersionRetrievePathParams } from '../types/VersionRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { versionRetrieve } from '../client/versionRetrieve.ts'

export const versionRetrieveQueryKey = (id: VersionRetrievePathParams['id']) => [{ url: '/api/v2/version/:id/', params: { id: id } }] as const

export type VersionRetrieveQueryKey = ReturnType<typeof versionRetrieveQueryKey>

export function versionRetrieveQueryOptions(id: VersionRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return versionRetrieve(id, config)
    },
  }
}

/**
 * @description Versions of the games, e.g., Red, Blue or Yellow.
 * @summary Get version
 * {@link /api/v2/version/:id/}
 */
export function useVersionRetrieve(
  id: VersionRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<VersionRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = versionRetrieveQueryKey(id)

  return useSWR<VersionRetrieveQueryResponse, ResponseErrorConfig<Error>, VersionRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...versionRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}