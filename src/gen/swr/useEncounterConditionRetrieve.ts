/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { EncounterConditionRetrieveQueryResponse, EncounterConditionRetrievePathParams } from '../types/EncounterConditionRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { encounterConditionRetrieve } from '../client/encounterConditionRetrieve.ts'

export const encounterConditionRetrieveQueryKey = (id: EncounterConditionRetrievePathParams['id']) =>
  [{ url: '/api/v2/encounter-condition/:id/', params: { id: id } }] as const

export type EncounterConditionRetrieveQueryKey = ReturnType<typeof encounterConditionRetrieveQueryKey>

export function encounterConditionRetrieveQueryOptions(
  id: EncounterConditionRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return encounterConditionRetrieve(id, config)
    },
  }
}

/**
 * @description Conditions which affect what pokemon might appear in the wild, e.g., day or night.
 * @summary Get encounter condition
 * {@link /api/v2/encounter-condition/:id/}
 */
export function useEncounterConditionRetrieve(
  id: EncounterConditionRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<EncounterConditionRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = encounterConditionRetrieveQueryKey(id)

  return useSWR<EncounterConditionRetrieveQueryResponse, ResponseErrorConfig<Error>, EncounterConditionRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...encounterConditionRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}