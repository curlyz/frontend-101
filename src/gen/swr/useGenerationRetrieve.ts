/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { GenerationRetrieveQueryResponse, GenerationRetrievePathParams } from '../types/GenerationRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { generationRetrieve } from '../client/generationRetrieve.ts'

export const generationRetrieveQueryKey = (id: GenerationRetrievePathParams['id']) => [{ url: '/api/v2/generation/:id/', params: { id: id } }] as const

export type GenerationRetrieveQueryKey = ReturnType<typeof generationRetrieveQueryKey>

export function generationRetrieveQueryOptions(id: GenerationRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return generationRetrieve(id, config)
    },
  }
}

/**
 * @description A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
 * @summary Get genration
 * {@link /api/v2/generation/:id/}
 */
export function useGenerationRetrieve(
  id: GenerationRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<GenerationRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = generationRetrieveQueryKey(id)

  return useSWR<GenerationRetrieveQueryResponse, ResponseErrorConfig<Error>, GenerationRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...generationRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}