/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { RegionRetrieveQueryResponse, RegionRetrievePathParams } from '../types/RegionRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { regionRetrieve } from '../client/regionRetrieve.ts'

export const regionRetrieveQueryKey = (id: RegionRetrievePathParams['id']) => [{ url: '/api/v2/region/:id/', params: { id: id } }] as const

export type RegionRetrieveQueryKey = ReturnType<typeof regionRetrieveQueryKey>

export function regionRetrieveQueryOptions(id: RegionRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return regionRetrieve(id, config)
    },
  }
}

/**
 * @description A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 * @summary Get region
 * {@link /api/v2/region/:id/}
 */
export function useRegionRetrieve(
  id: RegionRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<RegionRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = regionRetrieveQueryKey(id)

  return useSWR<RegionRetrieveQueryResponse, ResponseErrorConfig<Error>, RegionRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...regionRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}