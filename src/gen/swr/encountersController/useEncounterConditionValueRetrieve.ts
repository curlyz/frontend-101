/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type {
  EncounterConditionValueRetrieveQueryResponse,
  EncounterConditionValueRetrievePathParams,
} from '../../models/encountersController/EncounterConditionValueRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { encounterConditionValueRetrieve } from '../../clients/encountersController/encounterConditionValueRetrieve.ts'

export const encounterConditionValueRetrieveQueryKey = (id: EncounterConditionValueRetrievePathParams['id']) =>
  [{ url: '/api/v2/encounter-condition-value/:id/', params: { id: id } }] as const

export type EncounterConditionValueRetrieveQueryKey = ReturnType<typeof encounterConditionValueRetrieveQueryKey>

export function encounterConditionValueRetrieveQueryOptions(
  id: EncounterConditionValueRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return encounterConditionValueRetrieve(id, config)
    },
  }
}

/**
 * @description Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
 * @summary Get encounter condition value
 * {@link /api/v2/encounter-condition-value/:id/}
 */
export function useEncounterConditionValueRetrieve(
  id: EncounterConditionValueRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<EncounterConditionValueRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = encounterConditionValueRetrieveQueryKey(id)

  return useSWR<EncounterConditionValueRetrieveQueryResponse, ResponseErrorConfig<Error>, EncounterConditionValueRetrieveQueryKey | null>(
    shouldFetch ? queryKey : null,
    {
      ...encounterConditionValueRetrieveQueryOptions(id, config),
      ...queryOptions,
    },
  )
}