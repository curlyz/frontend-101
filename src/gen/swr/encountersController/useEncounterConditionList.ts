/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { EncounterConditionListQueryResponse, EncounterConditionListQueryParams } from '../../models/encountersController/EncounterConditionList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { encounterConditionList } from '../../clients/encountersController/encounterConditionList.ts'

export const encounterConditionListQueryKey = (params?: EncounterConditionListQueryParams) =>
  [{ url: '/api/v2/encounter-condition/' }, ...(params ? [params] : [])] as const

export type EncounterConditionListQueryKey = ReturnType<typeof encounterConditionListQueryKey>

export function encounterConditionListQueryOptions(
  params?: EncounterConditionListQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return encounterConditionList(params, config)
    },
  }
}

/**
 * @description Conditions which affect what pokemon might appear in the wild, e.g., day or night.
 * @summary List encounter conditions
 * {@link /api/v2/encounter-condition/}
 */
export function useEncounterConditionList(
  params?: EncounterConditionListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<EncounterConditionListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = encounterConditionListQueryKey(params)

  return useSWR<EncounterConditionListQueryResponse, ResponseErrorConfig<Error>, EncounterConditionListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...encounterConditionListQueryOptions(params, config),
    ...queryOptions,
  })
}