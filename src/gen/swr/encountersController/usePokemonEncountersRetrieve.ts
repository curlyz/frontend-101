/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type {
  PokemonEncountersRetrieveQueryResponse,
  PokemonEncountersRetrievePathParams,
} from '../../models/encountersController/PokemonEncountersRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { pokemonEncountersRetrieve } from '../../clients/encountersController/pokemonEncountersRetrieve.ts'

export const pokemonEncountersRetrieveQueryKey = (pokemon_id: PokemonEncountersRetrievePathParams['pokemon_id']) =>
  [{ url: '/api/v2/pokemon/:pokemon_id/encounters', params: { pokemon_id: pokemon_id } }] as const

export type PokemonEncountersRetrieveQueryKey = ReturnType<typeof pokemonEncountersRetrieveQueryKey>

export function pokemonEncountersRetrieveQueryOptions(
  pokemon_id: PokemonEncountersRetrievePathParams['pokemon_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return pokemonEncountersRetrieve(pokemon_id, config)
    },
  }
}

/**
 * @description Handles Pokemon Encounters as a sub-resource.
 * @summary Get pokemon encounter
 * {@link /api/v2/pokemon/:pokemon_id/encounters}
 */
export function usePokemonEncountersRetrieve(
  pokemon_id: PokemonEncountersRetrievePathParams['pokemon_id'],
  options: {
    query?: Parameters<typeof useSWR<PokemonEncountersRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = pokemonEncountersRetrieveQueryKey(pokemon_id)

  return useSWR<PokemonEncountersRetrieveQueryResponse, ResponseErrorConfig<Error>, PokemonEncountersRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...pokemonEncountersRetrieveQueryOptions(pokemon_id, config),
    ...queryOptions,
  })
}