/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ContestEffectRetrieveQueryResponse, ContestEffectRetrievePathParams } from '../types/ContestEffectRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { contestEffectRetrieve } from '../client/contestEffectRetrieve.ts'

export const contestEffectRetrieveQueryKey = (id: ContestEffectRetrievePathParams['id']) =>
  [{ url: '/api/v2/contest-effect/:id/', params: { id: id } }] as const

export type ContestEffectRetrieveQueryKey = ReturnType<typeof contestEffectRetrieveQueryKey>

export function contestEffectRetrieveQueryOptions(id: ContestEffectRetrievePathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return contestEffectRetrieve(id, config)
    },
  }
}

/**
 * @description Contest effects refer to the effects of moves when used in contests.
 * @summary Get contest effect
 * {@link /api/v2/contest-effect/:id/}
 */
export function useContestEffectRetrieve(
  id: ContestEffectRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<ContestEffectRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = contestEffectRetrieveQueryKey(id)

  return useSWR<ContestEffectRetrieveQueryResponse, ResponseErrorConfig<Error>, ContestEffectRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...contestEffectRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}