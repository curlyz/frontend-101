/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { EvolutionChainRetrieveQueryResponse, EvolutionChainRetrievePathParams } from '../types/EvolutionChainRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { evolutionChainRetrieve } from '../client/evolutionChainRetrieve.ts'

export const evolutionChainRetrieveQueryKey = (id: EvolutionChainRetrievePathParams['id']) =>
  [{ url: '/api/v2/evolution-chain/:id/', params: { id: id } }] as const

export type EvolutionChainRetrieveQueryKey = ReturnType<typeof evolutionChainRetrieveQueryKey>

export function evolutionChainRetrieveQueryOptions(
  id: EvolutionChainRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return evolutionChainRetrieve(id, config)
    },
  }
}

/**
 * @description Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pok√©mon they can evolve into up through the hierarchy.
 * @summary Get evolution chain
 * {@link /api/v2/evolution-chain/:id/}
 */
export function useEvolutionChainRetrieve(
  id: EvolutionChainRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<EvolutionChainRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = evolutionChainRetrieveQueryKey(id)

  return useSWR<EvolutionChainRetrieveQueryResponse, ResponseErrorConfig<Error>, EvolutionChainRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...evolutionChainRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}