/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { RegionListQueryResponse, RegionListQueryParams } from '../types/RegionList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { regionList } from '../client/regionList.ts'

export const regionListQueryKey = (params?: RegionListQueryParams) => [{ url: '/api/v2/region/' }, ...(params ? [params] : [])] as const

export type RegionListQueryKey = ReturnType<typeof regionListQueryKey>

export function regionListQueryOptions(params?: RegionListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return regionList(params, config)
    },
  }
}

/**
 * @description A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 * @summary List regions
 * {@link /api/v2/region/}
 */
export function useRegionList(
  params?: RegionListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<RegionListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = regionListQueryKey(params)

  return useSWR<RegionListQueryResponse, ResponseErrorConfig<Error>, RegionListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...regionListQueryOptions(params, config),
    ...queryOptions,
  })
}