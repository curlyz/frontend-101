/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { EvolutionTriggerListQueryResponse, EvolutionTriggerListQueryParams } from '../types/EvolutionTriggerList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { evolutionTriggerList } from '../client/evolutionTriggerList.ts'

export const evolutionTriggerListQueryKey = (params?: EvolutionTriggerListQueryParams) =>
  [{ url: '/api/v2/evolution-trigger/' }, ...(params ? [params] : [])] as const

export type EvolutionTriggerListQueryKey = ReturnType<typeof evolutionTriggerListQueryKey>

export function evolutionTriggerListQueryOptions(params?: EvolutionTriggerListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return evolutionTriggerList(params, config)
    },
  }
}

/**
 * @description Evolution triggers are the events and conditions that cause a Pok√©mon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
 * @summary List evolution triggers
 * {@link /api/v2/evolution-trigger/}
 */
export function useEvolutionTriggerList(
  params?: EvolutionTriggerListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<EvolutionTriggerListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = evolutionTriggerListQueryKey(params)

  return useSWR<EvolutionTriggerListQueryResponse, ResponseErrorConfig<Error>, EvolutionTriggerListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...evolutionTriggerListQueryOptions(params, config),
    ...queryOptions,
  })
}