/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type { ContestEffectListQueryResponse, ContestEffectListQueryParams } from '../../models/contestsController/ContestEffectList.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { contestEffectList } from '../../clients/contestsController/contestEffectList.ts'

export const contestEffectListQueryKey = (params?: ContestEffectListQueryParams) => [{ url: '/api/v2/contest-effect/' }, ...(params ? [params] : [])] as const

export type ContestEffectListQueryKey = ReturnType<typeof contestEffectListQueryKey>

export function contestEffectListQueryOptions(params?: ContestEffectListQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  return {
    fetcher: async () => {
      return contestEffectList(params, config)
    },
  }
}

/**
 * @description Contest effects refer to the effects of moves when used in contests.
 * @summary List contest effects
 * {@link /api/v2/contest-effect/}
 */
export function useContestEffectList(
  params?: ContestEffectListQueryParams,
  options: {
    query?: Parameters<typeof useSWR<ContestEffectListQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = contestEffectListQueryKey(params)

  return useSWR<ContestEffectListQueryResponse, ResponseErrorConfig<Error>, ContestEffectListQueryKey | null>(shouldFetch ? queryKey : null, {
    ...contestEffectListQueryOptions(params, config),
    ...queryOptions,
  })
}