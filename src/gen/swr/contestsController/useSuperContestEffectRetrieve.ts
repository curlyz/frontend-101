/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import useSWR from 'swr'
import type {
  SuperContestEffectRetrieveQueryResponse,
  SuperContestEffectRetrievePathParams,
} from '../../models/contestsController/SuperContestEffectRetrieve.ts'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import { superContestEffectRetrieve } from '../../clients/contestsController/superContestEffectRetrieve.ts'

export const superContestEffectRetrieveQueryKey = (id: SuperContestEffectRetrievePathParams['id']) =>
  [{ url: '/api/v2/super-contest-effect/:id/', params: { id: id } }] as const

export type SuperContestEffectRetrieveQueryKey = ReturnType<typeof superContestEffectRetrieveQueryKey>

export function superContestEffectRetrieveQueryOptions(
  id: SuperContestEffectRetrievePathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  return {
    fetcher: async () => {
      return superContestEffectRetrieve(id, config)
    },
  }
}

/**
 * @description Super contest effects refer to the effects of moves when used in super contests.
 * @summary Get super contest effect
 * {@link /api/v2/super-contest-effect/:id/}
 */
export function useSuperContestEffectRetrieve(
  id: SuperContestEffectRetrievePathParams['id'],
  options: {
    query?: Parameters<typeof useSWR<SuperContestEffectRetrieveQueryResponse, ResponseErrorConfig<Error>>>[2]
    client?: Partial<RequestConfig> & { client?: typeof client }
    shouldFetch?: boolean
  } = {},
) {
  const { query: queryOptions, client: config = {}, shouldFetch = true } = options ?? {}

  const queryKey = superContestEffectRetrieveQueryKey(id)

  return useSWR<SuperContestEffectRetrieveQueryResponse, ResponseErrorConfig<Error>, SuperContestEffectRetrieveQueryKey | null>(shouldFetch ? queryKey : null, {
    ...superContestEffectRetrieveQueryOptions(id, config),
    ...queryOptions,
  })
}